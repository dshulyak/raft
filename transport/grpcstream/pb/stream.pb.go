// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transport/grpcstream/pb/stream.proto

package stream

import (
	context "context"
	fmt "fmt"
	types "github.com/dshulyak/raft/types"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("transport/grpcstream/pb/stream.proto", fileDescriptor_2d5158354d9d004d)
}

var fileDescriptor_2d5158354d9d004d = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x29, 0x4a, 0xcc,
	0x2b, 0x2e, 0xc8, 0x2f, 0x2a, 0xd1, 0x4f, 0x2f, 0x2a, 0x48, 0x2e, 0x2e, 0x29, 0x4a, 0x4d, 0xcc,
	0xd5, 0x2f, 0x48, 0xd2, 0x87, 0xb0, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xd8, 0x20, 0x3c,
	0x29, 0xc1, 0x92, 0xca, 0x82, 0xd4, 0x62, 0x7d, 0x30, 0x09, 0x91, 0x32, 0x32, 0xe1, 0x62, 0x09,
	0x4a, 0x4c, 0x2b, 0x11, 0xd2, 0xe1, 0x62, 0x09, 0xc8, 0x2c, 0x48, 0x15, 0xe2, 0xd3, 0x83, 0xc8,
	0xfa, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x4a, 0xa1, 0xf1, 0x95, 0x18, 0x34, 0x18, 0x0d, 0x18,
	0x9d, 0x24, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09,
	0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0x6c, 0xac,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x08, 0x27, 0x60, 0x99, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	Pipe(ctx context.Context, opts ...grpc.CallOption) (Raft_PipeClient, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Pipe(ctx context.Context, opts ...grpc.CallOption) (Raft_PipeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Raft_serviceDesc.Streams[0], "/stream.Raft/Pipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftPipeClient{stream}
	return x, nil
}

type Raft_PipeClient interface {
	Send(*types.Message) error
	Recv() (*types.Message, error)
	grpc.ClientStream
}

type raftPipeClient struct {
	grpc.ClientStream
}

func (x *raftPipeClient) Send(m *types.Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftPipeClient) Recv() (*types.Message, error) {
	m := new(types.Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	Pipe(Raft_PipeServer) error
}

// UnimplementedRaftServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) Pipe(srv Raft_PipeServer) error {
	return status.Errorf(codes.Unimplemented, "method Pipe not implemented")
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_Pipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftServer).Pipe(&raftPipeServer{stream})
}

type Raft_PipeServer interface {
	Send(*types.Message) error
	Recv() (*types.Message, error)
	grpc.ServerStream
}

type raftPipeServer struct {
	grpc.ServerStream
}

func (x *raftPipeServer) Send(m *types.Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftPipeServer) Recv() (*types.Message, error) {
	m := new(types.Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pipe",
			Handler:       _Raft_Pipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transport/grpcstream/pb/stream.proto",
}
